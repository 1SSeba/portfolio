---
import Layout from '../layouts/Layout.astro';
import Container from '../components/Container';
import { ProjectCard } from '../components/ProjectCard';
import { projects, categories } from '../data/projects';
---

<Layout title="Proyectos | SSeba - Developer">
  <div class="bg-gradient-to-b from-white to-neutral-100 dark:from-neutral-900 dark:to-neutral-950 min-h-screen pb-20">
    <Container>
      <div class="py-16">
        <!-- Header with gradient text -->
        <div class="text-center mb-12">
          <h1 class="text-5xl font-extrabold mb-4 bg-clip-text text-transparent bg-gradient-to-r from-primary-500 to-secondary-500 pb-2">
            Mis Proyectos
          </h1>
          <p class="text-lg text-neutral-600 dark:text-neutral-400 max-w-2xl mx-auto leading-relaxed">
            Una colección de mis trabajos más recientes y destacados en diferentes áreas del desarrollo.
          </p>
        </div>
        
        <!-- Search and Filter with improved styling -->
        <div class="mb-12 flex flex-col sm:flex-row gap-6 justify-between items-center bg-white dark:bg-neutral-800 p-6 rounded-2xl shadow-lg border border-neutral-200 dark:border-neutral-700">
          <div class="flex gap-2 overflow-x-auto pb-2 w-full sm:w-auto scrollbar-thin scrollbar-thumb-neutral-300 dark:scrollbar-thumb-neutral-700">
            {categories.map((category) => (
              <button
                data-category={category.id}
                data-active={category.id === "all" ? "true" : "false"}
                class="px-4 py-2 rounded-lg text-sm font-medium transition-all duration-300
                        data-[active=true]:bg-primary-600 data-[active=true]:text-white
                        data-[active=false]:bg-white data-[active=false]:text-neutral-600
                        dark:data-[active=false]:bg-neutral-800 dark:data-[active=false]:text-neutral-300
                        dark:data-[active=true]:bg-primary-500 dark:data-[active=true]:text-white
                        hover:scale-105 whitespace-nowrap shadow-sm border border-neutral-200 dark:border-neutral-700"
              >
                {category.name}
              </button>
            ))}
          </div>
          
          <div class="relative w-full sm:w-64">
            <input 
              type="text" 
              id="project-search"
              placeholder="Buscar proyectos..." 
              class="w-full px-4 py-3 rounded-lg border border-neutral-200 dark:border-neutral-700 bg-white dark:bg-neutral-800 text-neutral-800 dark:text-neutral-200 focus:ring-2 focus:ring-primary-500 focus:border-transparent shadow-sm"
            />
            <svg xmlns="http://www.w3.org/2000/svg" class="absolute right-3 top-3 h-5 w-5 text-neutral-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
            </svg>
          </div>
        </div>

        <!-- Improved Projects Grid Layout with animations -->
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 sm:gap-8" id="projects-grid">
          {projects.map((project, index) => (
            <div class="opacity-0 animate-fade-in" style={`animation-delay: ${index * 100}ms`}>
              <ProjectCard project={project} client:load />
            </div>
          ))}
        </div>
        
        <!-- Enhanced No Results Message -->
        <div id="no-results" class="hidden py-20 text-center">
          <div class="mx-auto h-32 w-32 text-neutral-300 dark:text-neutral-600">
            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M9.172 16.172a4 4 0 015.656 0M9 10h.01M15 10h.01M12 2C6.477 2 2 6.477 2 12s4.477 10 10 10 10-4.477 10-10S17.523 2 12 2z" />
            </svg>
          </div>
          <h3 class="mt-4 text-xl font-bold text-neutral-700 dark:text-neutral-300">No se encontraron proyectos</h3>
          <p class="mt-2 text-neutral-500 dark:text-neutral-400">Intenta con otros filtros o términos de búsqueda</p>
          <button 
            id="reset-filters" 
            class="mt-6 px-4 py-2 bg-primary-600 hover:bg-primary-700 text-white rounded-lg transition-colors"
          >
            Restablecer filtros
          </button>
        </div>
      </div>
    </Container>
  </div>
</Layout>

<script>
  // Enhanced filter and search functionality
  const categoryButtons = document.querySelectorAll('[data-category]') as NodeListOf<HTMLElement>;
  const projectsGrid = document.getElementById('projects-grid') as HTMLElement;
  const projectCards = document.querySelectorAll('[data-project-category]') as NodeListOf<HTMLElement>;
  const searchInput = document.getElementById('project-search') as HTMLInputElement;
  const noResultsEl = document.getElementById('no-results') as HTMLElement;
  const resetFilters = document.getElementById('reset-filters') as HTMLElement;
  
  let activeCategory = 'all';
  let searchTerm = '';
  
  // Category filter functionality
  categoryButtons.forEach(button => {
    button.addEventListener('click', () => {
      const category = button.dataset.category as string;
      
      // Update active button
      categoryButtons.forEach(btn => {
        btn.dataset.active = (btn.dataset.category === category).toString();
      });
      
      activeCategory = category;
      filterProjects();
    });
  });
  
  // Search functionality
  searchInput.addEventListener('input', (e) => {
    searchTerm = (e.target as HTMLInputElement).value.toLowerCase();
    filterProjects();
  });
  
  // Reset filters button
  resetFilters.addEventListener('click', () => {
    activeCategory = 'all';
    searchTerm = '';
    searchInput.value = '';
    
    categoryButtons.forEach(btn => {
      btn.dataset.active = (btn.dataset.category === 'all').toString();
    });
    
    filterProjects();
  });
  
  // Combined filter function
  function filterProjects() {
    let visibleCount = 0;
    
    projectCards.forEach(card => {
      const category = card.dataset.projectCategory;
      const projectTitle = card.querySelector('h3')?.textContent?.toLowerCase() || '';
      const projectDescription = card.querySelector('p')?.textContent?.toLowerCase() || '';
      const tags = Array.from(card.querySelectorAll('span')).map(tag => tag.textContent?.toLowerCase() || '');
      
      const matchesCategory = activeCategory === 'all' || category === activeCategory;
      const matchesSearch = searchTerm === '' || 
                           projectTitle.includes(searchTerm) || 
                           projectDescription.includes(searchTerm) ||
                           tags.some(tag => tag.includes(searchTerm));
      
      const isVisible = matchesCategory && matchesSearch;
      
      // Apply fade animation when filtering
      if (isVisible) {
        card.classList.remove('hidden');
        setTimeout(() => {
          card.classList.remove('opacity-0');
          card.classList.add('opacity-100');
        }, 10);
        visibleCount++;
      } else {
        card.classList.remove('opacity-100');
        card.classList.add('opacity-0');
        setTimeout(() => {
          card.classList.add('hidden');
        }, 300);
      }
    });
    
    // Show/hide no results message
    if (visibleCount === 0) {
      noResultsEl.classList.remove('hidden');
      setTimeout(() => {
        noResultsEl.classList.remove('opacity-0');
        noResultsEl.classList.add('opacity-100');
      }, 10);
    } else {
      noResultsEl.classList.remove('opacity-100');
      noResultsEl.classList.add('opacity-0');
      setTimeout(() => {
        noResultsEl.classList.add('hidden');
      }, 300);
    }
  }

  // Add keyframe animation to CSS
  document.head.insertAdjacentHTML('beforeend', `
    <style>
      @keyframes fade-in {
        from { opacity: 0; transform: translateY(10px); }
        to { opacity: 1; transform: translateY(0); }
      }
      .animate-fade-in {
        animation: fade-in 0.5s ease-out forwards;
      }
    </style>
  `);
  
  // Make project cards visible with staggered animation
  const projectContainers = document.querySelectorAll('#projects-grid > div');
  projectContainers.forEach((card, index) => {
    setTimeout(() => {
      card.classList.add('animate-fade-in');
    }, 100 * index);
  });
</script>

<style>
  /* Scrollbar styling */
  .scrollbar-thin::-webkit-scrollbar {
    height: 4px;
  }
  
  .scrollbar-thumb-neutral-300::-webkit-scrollbar-thumb {
    background-color: rgb(212, 212, 212);
    border-radius: 9999px;
  }
  
  .dark .scrollbar-thumb-neutral-700::-webkit-scrollbar-thumb {
    background-color: rgb(64, 64, 64);
  }
  
  .opacity-0 {
    opacity: 0;
  }
  
  .opacity-100 {
    opacity: 1;
  }
  
  .hidden {
    display: none;
  }
  
  .transition-opacity {
    transition: opacity 0.3s ease-out;
  }
</style>